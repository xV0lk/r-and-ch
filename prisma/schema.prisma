// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//zod schema generator
generator zod {
  provider              = "zod-prisma"
  output                = "./zod" // (default) the directory where generated zod schemas will be saved
  relationModel         = true // (default) Create and export both plain and related models.
  modelCase             = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  modelSuffix           = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas
  useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  imports               = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SCHEMA DEFINITIONS
model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  name      String
  role      Role      @default(USER)
  password  String
  Request   Request[]
  table     Table?    @relation(fields: [tableNum], references: [tableNum])
  tableNum  Int?
}

model Request {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  status        ReqStatus @default(pending)
  type          ReqType
  table         Table     @relation(fields: [tableNum], references: [tableNum])
  tableNum      Int
  songId        String
  songTitle     String
  songThumbnail String
  songTWidth    Int
  songTHeight   Int
  user          User?     @relation(fields: [userId], references: [id])
  userId        Int?
}

model Table {
  tableNum Int       @id
  token    Token?
  request  Request[]
  User     User[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
  closedAt  DateTime
  isValid   Boolean  @default(true)
  sugLeft   Int      @default(2)
  reqLeft   Int      @default(2)
  table     Table    @relation(fields: [tableNum], references: [tableNum])
  tableNum  Int      @unique
}

model PlaylistItem {
  id         String   @id
  title      String
  thumbnail  String
  tWidth     Int
  tHeight    Int
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  position   Int
}

model Playlist {
  id          String         @id
  title       String
  description String
  itemCount   Int
  thumbnail   String
  tWidth      Int
  tHeight     Int
  items       PlaylistItem[]
  player      String
}

enum ReqStatus {
  pending
  aprooved
  denied
}

enum ReqType {
  suggestion
  request
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}
